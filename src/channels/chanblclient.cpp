#include "chanblclient.h"
#include "ui_chanblclient.h"

template< typename T >
QListWidgetItem* newListWidgetItem(QListWidget* parent,QString text, T data){
    QListWidgetItem* item = new QListWidgetItem(text,parent);
    QVariant variant;
    variant.setValue(data);
    item->setData(Qt::UserRole,variant);
    return item;
}

static const QLatin1String serviceUuid("00001101-0000-1000-8000-00805F9B34FB");


chanBLClient::chanBLClient(QWidget* parent) : uAbstractDataChannel(parent),
                                                ui(new Ui::chanBLClient),
                                                mLocalDevice(new QBluetoothLocalDevice(this)),
                                                mChannel(new QBluetoothSocket(QBluetoothServiceInfo::RfcommProtocol,this)),
                                                mScanner(new QBluetoothDeviceDiscoveryAgent(this)){
    ui->setupUi(this);

    //////////////////////////////////////////////////////////////////////

    refreshLocalInfo();
    ui->lbl_device_mac->setVisible(false);
    connect(ui->cmb_device_name,static_cast<void(QComboBox::*)(int)>(&QComboBox::currentIndexChanged),[=](int){ui->lbl_device_mac->setText(ui->cmb_device_name->currentData().toString());});

    ui->lbl_local->installEventFilter(this);
    ui->lbl_device->installEventFilter(this);
    ui->lbl_local_mac->installEventFilter(this);
    ui->lbl_local_name->installEventFilter(this);
    ui->lbl_device_mac->installEventFilter(this);

    connect(ui->btn_scan,&QToolButton::clicked,this,&chanBLClient::scan);
    connect(ui->btn_refresh,&QToolButton::clicked,this,&chanBLClient::refreshLocalInfo);

    //////////////////////////////////////////////////////////////////////

    connect(mChannel,&QBluetoothSocket::readyRead,[=](){ emit readyReadLine(mChannel->readLine());});
    connect(mChannel,&QBluetoothSocket::connected,[=](){ emit runStateChanged(true); setWidgetsEnable(false,ui->cmb_device_name,ui->btn_scan,Q_NULLPTR);});
    connect(mChannel,&QBluetoothSocket::disconnected,[=](){ emit runStateChanged(false); setWidgetsEnable(true,ui->cmb_device_name,ui->btn_scan,Q_NULLPTR); });

    connect(mChannel,static_cast<void(QBluetoothSocket::*)(QBluetoothSocket::SocketError)>(&QBluetoothSocket::error),
            [=](QBluetoothSocket::SocketError error){
        if( QBluetoothSocket::NoSocketError != error) qDebug() << error << mScanner->errorString();}

    // HostNotFoundError 找不到远程主机
    // ServiceNotFoundError 无法在远程主机上找到服务UUID
    // NetworkError 尝试从套接字读取或写入返回错误
    // UnsupportedProtocolError 该平台不支持该协议
    // OperationError 当套接字处于不允许的状态时尝试进行操作

    );

    //////////////////////////////////////////////////////////////////////

    mScanner->setInquiryType(QBluetoothDeviceDiscoveryAgent::InquiryType::GeneralUnlimitedInquiry); // 扫描的设备类型
    mScanner->setLowEnergyDiscoveryTimeout(5000);

    connect(mScanner,&QBluetoothDeviceDiscoveryAgent::deviceDiscovered,[=](QBluetoothDeviceInfo info){
        ui->cmb_device_name->addItem(info.name(),
 #ifdef Q_OS_MAC
                         // On OS X and iOS we do not have addresses,
                         // only unique UUIDs generated by Core Bluetooth.
                         info.deviceUuid().toString()
 #else
                         info.address().toString()
 #endif
                                     );
        // QBluetoothLocalDevice::Pairing pairingStatus = mLocalDevice->pairingStatus(info.address());
        // setTextColor(QColor((pairingStatus == QBluetoothLocalDevice::Paired || pairingStatus == QBluetoothLocalDevice::AuthorizedPaired ) ?Qt::blue : Qt::black));
    });

    connect(mScanner,&QBluetoothDeviceDiscoveryAgent::finished,[=](){
        //  Q_FOREACH(auto device,mScanner->discoveredDevices()){}
        ui->btn_scan->setChecked(false);
        ui->lbl_device_mac->setVisible(ui->cmb_device_name->count() != 0);
        qDebug() << "scan finished";
    });


}

chanBLClient::~chanBLClient() {
    delete ui;
}

void chanBLClient::open() {
    QBluetoothAddress Address(ui->cmb_device_name->currentData().toString());
    mChannel->connectToService(Address, QBluetoothUuid(serviceUuid) ,QIODevice::ReadWrite);
}

void chanBLClient::close() {
    mChannel->disconnectFromService();
    mChannel->close();
}

void chanBLClient::write(const QByteArray& bytes) {
    mChannel->write(bytes);
}

void chanBLClient::scan()
{

    if( mLocalDevice->hostMode() == QBluetoothLocalDevice::HostPoweredOff) mLocalDevice->powerOn(); // 打开蓝牙(win10下没什么用)
    mScanner->setInquiryType(QBluetoothDeviceDiscoveryAgent::GeneralUnlimitedInquiry);

    if( mScanner->isActive()){
        ui->btn_scan->setChecked(false);
        mScanner->stop();
    }else{
         ui->btn_scan->setChecked(true);
        ui->cmb_device_name->clear();
        mScanner->start();
    }


}

void chanBLClient::refreshLocalInfo()
{
    // 仅蓝牙运行时才能获取，而且 mLocalDevice 不会动态更新
    delete mLocalDevice;
    mLocalDevice = new QBluetoothLocalDevice();
    ui->lbl_local_name->setText(mLocalDevice->name()); // 本地蓝牙名
    ui->lbl_local_mac->setText(mLocalDevice->address().toString()); // 本地 MAC
}

bool chanBLClient::eventFilter(QObject* watched, QEvent* event) {
    // left doubleclick label and then copy name / mac to clipboard

    if (event->type() == QEvent::MouseButtonDblClick) {
        if (watched == ui->lbl_local) {
            QApplication::clipboard()->setText( QString("%1 %2").arg(ui->lbl_local_name->text()).arg(ui->lbl_local_mac->text()));
        } else if (watched == ui->lbl_local_name) {
            QApplication::clipboard()->setText(ui->lbl_local_name->text());
        }else if (watched == ui->lbl_local_mac) {
            QApplication::clipboard()->setText(ui->lbl_local_mac->text());
        }else if (watched == ui->lbl_device) {
            QApplication::clipboard()->setText(QString("%1 %2").arg(ui->cmb_device_name->currentText()).arg(ui->cmb_device_name->currentData().toString()));
        }else if (watched == ui->lbl_device_mac) {
            QApplication::clipboard()->setText(ui->lbl_device_mac->text());
        }
    }

    return uAbstractDataChannel::eventFilter(watched, event);
}

